name: CI Enhanced

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PNPM_VERSION: 10
  NODE_VERSION: 20.x
  DATABASE_URL: 'file:./ci_test.db'

jobs:
  # Fast quality checks - run first for immediate feedback
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.should-run-tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for relevant changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(ts|js|svelte)$|package\.json$|vitest\.config\.' > /dev/null; then
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run type check
        run: pnpm run check

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm exec prettier --check .

  # Unit tests - fast execution
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-run-tests == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm run test:unit --coverage
        env:
          NODE_ENV: test

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-coverage
          path: coverage/
          retention-days: 7

  # Integration tests - database required
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-run-tests == 'true'
    strategy:
      matrix:
        test-group: [database, api, auth]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          export TEST_DB_PATH="./ci_test_${{ matrix.test-group }}_$(date +%s).db"
          echo "TEST_DB_PATH=$TEST_DB_PATH" >> $GITHUB_ENV
          pnpm run db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run integration tests
        run: pnpm run test:integration --reporter=verbose
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          TEST_DB_PATH: ${{ env.TEST_DB_PATH }}
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-results-${{ matrix.test-group }}
          path: |
            test-results/
            *.db
          retention-days: 3

      - name: Cleanup test database
        if: always()
        run: |
          rm -f ./ci_test*.db || true
          rm -f ./test_*.db || true

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-gate, unit-tests]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/
          retention-days: 7

  # Performance benchmarks - conditional
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build/

      - name: Run performance tests
        run: |
          echo "Performance testing would run here"
          # Future: Add actual performance test commands

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-gate, unit-tests, integration-tests, build]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.quality-gate.result }}" != "success" ]]; then
            echo "Quality gate failed"
            exit 1
          fi
          if [[ "${{ needs.unit-tests.result }}" != "success" && "${{ needs.quality-gate.outputs.should-run-tests }}" == "true" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" && "${{ needs.quality-gate.outputs.should-run-tests }}" == "true" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All CI checks passed successfully!"